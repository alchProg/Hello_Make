Компилируемый язык — это такой язык, что программа, будучи скомпилированной, содержит инструкции целевой машины. Этот машинный код непонятен людям.

    Компиля́ция — трансляция программы, составленной на исходном языке высокого уровня, в эквивалентную программу на низкоуровневом языке, 
        близком машинному коду (абсолютный код, объектный модуль, иногда на язык ассемблера). Входной информацией для компилятора (исходный код) 
        является описание алгоритма или программа на предметно-ориентированном языке, а на выходе компилятора — эквивалентное описание алгоритма 
        на машинно-ориентированном языке (объектный код).

    Главное преимущество компилируемых языков — это скорость исполнения. Поскольку они конвертируются в машинный код, они работают гораздо 
        быстрее и эффективнее, нежели интерпретируемые, особенно если учесть сложность утверждений некоторых современных скриптовых 
        интерпретируемых языков.

    Низкоуровневые языки как правило являются компилируемыми, поскольку эффективность обычно ставится выше кроссплатформенности. Кроме того, 
        компилируемые языки дают разработчику гораздо больше возможностей в плане контроля аппаратного обеспечения, например, управления памятью 
        и использованием процессора. Примерами компилируемых языков являются C, C++, Erlang, Haskell и более современные языки, такие как Rust и Go.

    Проблемы компилируемых языков, в общем-то, очевидны. Для запуска программы, написаной на компилируемом языке, её сперва нужно скомпилировать. 
        Это не только лишний шаг, но и значительное усложнение отладки, ведь для тестирования любого изменения программу нужно компилировать заново.
        Кроме того, компилируемые языки являются платформо-зависимыми, поскольку машинный код зависит от машины, на которой компилируется и 
        исполняется программа.

Интерпретируемый же язык — это такой, в котором инструкции не исполняются целевой машиной, а считываются и исполняются другой программой 
    (которая обычно написана на языке целевой машины).

    Программу построчно исполнят интерпретаторы.

    Раньше процесс интерпретации занимал очень много времени, но с приходом таких технологий, как JIT-компиляция, разрыв между 
        компилируемыми и интерпретируемыми языками сокращается. Примерами интерпретируемых языков являются PHP, Perl, Ruby и Python.

    Некоторые из концептов, которые стали проще благодаря интерпретируемым языкам:
        Независимость от платформы;
        Рефлексия;
        Динамическая типизация;
        Меньший размер исполняемых файлов:
        Динамические области видимости.

    Основным недостатком интерпретируемых языком является их невысокая скорость исполнения. Тем не менее, JIT-компиляция позволяет ускорить 
        процесс благодаря переводу часто используемых последовательностей инструкции в машинный код.

Заключение (+/- и различия):
    Компилируемые языки: 
        + Самая высокая скорость исполнения;
        + Больше возможностей в плане контроля аппаратного обеспечения ( напр. управления памятью и использованием процессора).

        - Необходимость компиляции и перекомпиляции при тестировании любоко изменения;
        - Платформо-зависимымость.

    Интерпретируемые языки:
        + Не нужна компиляция;
        + кроссплатформенность.

        - Низкая скорость исполнения (в сравнении с компилируемыми языками);
        - Зависимость от интерпритаторов => возможности контроля аппаратного обеспечения ограничены устройством интерпретатора.